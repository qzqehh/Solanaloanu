// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract LoanContract {
    address public owner;
    mapping(address => uint256) public borrowedAmounts;
    mapping(address => uint256) public loanDueDates;
    mapping(address => bool) public isCollateralProvided;

    event LoanIssued(address borrower, uint256 amount, uint256 dueDate);
    event LoanRepaid(address borrower, uint256 amount);
    event CollateralProvided(address provider, uint256 amount);
    event LoanClosedEarly(address borrower, uint256 repaidAmount);

    modifier onlyOwner() {
        require(msg.sender == owner, "Not the owner");
        _;
    }

    constructor() {
        owner = msg.sender;
    }

    function borrow(uint256 amount, uint256 durationDays) external {
        require(amount > 0, "Borrow amount must be greater than 0");
        require(borrowedAmounts[msg.sender] == 0, "You have an existing loan");

        // Assume a stablecoin is used for the loan (e.g., USDC)
        IERC20 usdcToken = IERC20(address(0xUsdcTokenAddress));
        uint256 totalAmount = calculateTotalAmount(amount, durationDays);

        // Transfer total amount to borrower
        require(usdcToken.transferFrom(owner, msg.sender, totalAmount), "Transfer failed");

        // Update borrowed amounts and loan due date
        borrowedAmounts[msg.sender] = totalAmount;
        loanDueDates[msg.sender] = block.timestamp + (durationDays * 1 days);

        emit LoanIssued(msg.sender, totalAmount, loanDueDates[msg.sender]);
    }

    function repay() external {
        require(borrowedAmounts[msg.sender] > 0, "No existing loan");
        require(block.timestamp <= loanDueDates[msg.sender], "Loan is overdue");

        // Assume a stablecoin is used for the loan (e.g., USDC)
        IERC20 usdcToken = IERC20(address(0xUsdcTokenAddress));
        uint256 repaidAmount = borrowedAmounts[msg.sender];

        // Transfer repaid amount to owner
        require(usdcToken.transferFrom(msg.sender, owner, repaidAmount), "Transfer failed");

        // Clear borrower's borrowed amounts and loan due date
        borrowedAmounts[msg.sender] = 0;
        loanDueDates[msg.sender] = 0;

        emit LoanRepaid(msg.sender, repaidAmount);
    }

    function provideCollateral() external payable {
        require(msg.value > 0, "Collateral amount must be greater than 0");

        // Update collateral status
        isCollateralProvided[msg.sender] = true;

        emit CollateralProvided(msg.sender, msg.value);
    }

    function closeLoanEarly() external {
        require(borrowedAmounts[msg.sender] > 0, "No existing loan");
        require(isCollateralProvided[msg.sender], "Collateral not provided");
        require(block.timestamp < loanDueDates[msg.sender], "Loan is already overdue");

        // Calculate the early repayment amount (considering collateral)
        uint256 repaidAmount = calculateEarlyRepaymentAmount(msg.sender);

        // Transfer repaid amount to owner
        payable(owner).transfer(repaidAmount);

        // Clear borrower's borrowed amounts, loan due date, and collateral status
        borrowedAmounts[msg.sender] = 0;
        loanDueDates[msg.sender] = 0;
        isCollateralProvided[msg.sender] = false;

        emit LoanClosedEarly(msg.sender, repaidAmount);
    }

    function calculateTotalAmount(uint256 principal, uint256 durationDays) internal pure returns (uint256) {
        // Simple interest calculation for demonstration purposes
        uint256 annualInterestRate = 5; // 5% annual interest rate
        uint256 dailyInterestRate = (annualInterestRate * 1e18) / 36500; // Daily interest rate
        return (principal * dailyInterestRate * durationDays) / 1e18 + principal;
    }

    function calculateEarlyRepaymentAmount(address borrower) internal view returns (uint256) {
        // Simplified logic: repaidAmount = borrowedAmount + collateralValue
        return borrowedAmounts[borrower] + address(this).balance;
    }
}
